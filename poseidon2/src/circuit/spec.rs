// //! This file was generated by running poseidon2_rust_params.sage
// //! Specification for rate 2 Poseidon using the BN256 curve.

//use super::params_bn254 as poseidon_params_Fr;
use super::params;
use ff::FromUniformBytes;
use ff::PrimeField;
use halo2_proofs::halo2curves::bn256::{Fq, Fr};
use halo2_proofs::halo2curves::serde::SerdeObject;
use super::primitives::Spec;

#[derive(Debug, Clone, Copy)]
pub struct PoseidonSpec;

pub(crate) type Mat<F, const T: usize> = [[F; T]; T];

impl<F> Spec<F, 3, 2> for PoseidonSpec
where
F: Ord + PrimeField + SerdeObject,
{
// impl Spec<Fr, 3, 2> for PoseidonSpec {
    fn full_rounds() -> usize {
        8
    }

    fn partial_rounds() -> usize {
        56
    }

    fn sbox(val: F) -> F {
        let val_sq = val.square();
        val_sq * val_sq * val 
    }

    fn secure_mds() -> usize {
        unimplemented!()
    }

    fn constants() -> (Vec<[F; 3]>, Mat<F, 3>, Mat<F, 3>) {
        (
            params::round_constants3()[..].to_vec(),
            params::mat_external3(),
            params::mat_internal3(),
        )
    }
}

// impl<F> Spec<F, 3, 2> for PoseidonSpecFq 
// where
// F: Ord + PrimeField,
// {
//     fn full_rounds() -> usize {
//         8
//     }

//     fn partial_rounds() -> usize {
//         56
//     }

//     fn sbox(val: F) -> F {
//         let val_sq = val.square();
//         val_sq * val_sq * val 
//     }

//     fn secure_mds() -> usize {
//         unimplemented!()
//     }

//     fn constants() -> (Vec<[F; 3]>, Mat<F, 3>, Mat<F, 3>) {
//         (
//             poseidon_params_Fq::RC3[..].to_vec(),
//             *poseidon_params_Fq::MAT_EXTERNAL3,
//             *poseidon_params_Fq::MAT_INTERNAL3,
//         )
//     }
// }

// impl<F: PrimeField, const T: usize, const R: usize> Spec<F, T, R> for PoseidonSpec 
// where
// F: FromUniformBytes<64> + Ord,
// {
//     fn full_rounds() -> usize {
//         8
//     }

//     fn partial_rounds() -> usize {
//         56
//     }

//     fn sbox(val: F) -> F {
//         val.pow_vartime([5])
//     }

//     fn secure_mds() -> usize {
//         SECURE_MDS
//     }

//     fn constants() -> (Vec<[F; T]>, Mds<F, T>, Mds<F, T>) {
//         generate_constants::<F, PoseidonSpec, T, R>()
//     }
// }
