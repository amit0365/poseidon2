// //! This file was generated by running generate_params.py
// //! Specification for rate 4 Poseidon using the BN256 curve.
// //! Patterned after [halo2_gadgets::poseidon::primitives::P128Pow5T3]
// use crate::accumulation::protostar::ivc::halo2::test::strawman::{R_F, R_P, SECURE_MDS};

use super::params as poseidon_params;
// use halo2_base::utils::{FromUniformBytes, PrimeField};
// use halo2_gadgets::poseidon::primitives::*;
// use halo2_base::halo2_proofs::arithmetic::Field;
use halo2_proofs::halo2curves::bn256::Fq as Fp;
use super::primitives::Spec;

#[derive(Debug, Clone, Copy)]
pub struct PoseidonSpecFp;

#[derive(Debug, Clone, Copy)]
pub struct PoseidonSpec;

pub(crate) type MatFp<Fp, const T: usize> = [[Fp; T]; T];

impl Spec<Fp, 3, 2> for PoseidonSpecFp {
    fn full_rounds() -> usize {
        8
    }

    fn partial_rounds() -> usize {
        56
    }

    fn sbox(val: Fp) -> Fp {
        let val_sq = val.square();
        val_sq * val_sq * val 
    }

    fn secure_mds() -> usize {
        unimplemented!()
    }

    fn constants() -> (Vec<[Fp; 3]>, MatFp<Fp, 3>, MatFp<Fp, 3>) {
        (
            poseidon_params::RC3[..].to_vec(),
            *poseidon_params::MAT_EXTERNAL3,
            *poseidon_params::MAT_INTERNAL3,
        )
    }
}

// impl<F: PrimeField, const T: usize, const R: usize> Spec<F, T, R> for PoseidonSpec 
// where
// F: FromUniformBytes<64> + Ord,
// {
//     fn full_rounds() -> usize {
//         R_F
//     }

//     fn partial_rounds() -> usize {
//         R_P
//     }

//     fn sbox(val: F) -> F {
//         val.pow_vartime([5])
//     }

//     fn secure_mds() -> usize {
//         SECURE_MDS
//     }

//     fn constants() -> (Vec<[F; T]>, Mds<F, T>, Mds<F, T>) {
//         generate_constants::<F, PoseidonSpec, T, R>()
//     }
// }
